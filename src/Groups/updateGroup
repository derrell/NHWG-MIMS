#!/bin/bash -e
# Runs a MongoShell script given on the command line to update
# a Google group membership.  Each script is unique to a particular
# group.  Optionally you can include a JavaScript expression on the
# commandline that will be evaluated prior to running the main script. This
# is a crude method to simulate commandline args for the main script.
#
# Input:
# MongoShell script. By convention the script name is the base name of the group.
# example: group: allseniors@nhwg.cap.gov -> script name: allseniors.js
# Output:
# a MIMS type job file in the job queue
# History:
# 08Nov21 MEG Output file now gets timestam T%H%M%S appended to name.
# 08Nov21 MEG Fixed not exit on 0 args, added optional JS expr.
# 05Sep19 MEG Created.
#

# import config var's
. ./$(basename $0).conf

# get credentials
. $CREDS

USAGE="Usage: $(basename $0) <mongo_script_file.js> [\"JS expr\"]\n
\t Optional JS expression may be used to pass args to script by\n
\t setting vars."
[[ $# < 1 ]] && (echo -e $USAGE;exit 1 )
[[ ! -f "$1" ]] && (echo "ERROR::File: $1 not found.";exit 1)

# Output Job filename
JOB=${1%.js}$(date +%Y%m%dT%H%M%S).job

# Run the script
mongo --quiet -u "$USERID" -p "$PASSWD" --authenticationDatabase $DB --eval "$2" $1 >$JOBQ/$JOB
