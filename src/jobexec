#!/bin/bash
## Copyright 2017 Marshall E. Giguere
##
##   Licensed under the Apache License, Version 2.0 (the "License");
##   you may not use this file except in compliance with the License.
##   You may obtain a copy of the License at
##
##       http://www.apache.org/licenses/LICENSE-2.0
##
##   Unless required by applicable law or agreed to in writing, software
##   distributed under the License is distributed on an "AS IS" BASIS,
##   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
##   See the License for the specific language governing permissions and
##   limitations under the License.

# jobexec is designed to be run as a cron job, when awakened it
# scans the JOBS directory for .job files.  The jobs are executed in sort
# order, successfully completed job files are move to the completed
# directory.  Job files that begin with "HOLD-" | "hold-"  are skipped. Jobs
# that run with errors are moved from the queue to completed and errors
# are reported, this is to prevent unintended re-runs.
#
# History:
# 28Apr18 MEG bash replaced with gam batch to execute jobs.
# 13Mar18 MEG Skip missing job or log files.
# 05Feb18 MEG print tail of log file as report.
# 02Sep17 MEG Jobs that have errors now sent to "completed" regardless.
# 07Jul17 MEG Created.
#

# Location of config file
CONF=./jobexec.conf

# check for config file, source configuration if it exists
if [ ! -f $CONF ]; then
    echo $(basename $0)": Missing config file: $CONF"
    exit 1
fi
# source config
. $CONF

# Set default locations if conf file missing
# Path to .job files
 [ -z $JOBS ] && JOBS=./job

# location for completed jobs
 [ -z $COMPJOBS ] && COMPJOBS=$JOB/completed

# Check that jobs directory exists before we do anything
if [ ! -d $JOBS ]; then
    echo ERROR: jobs directory: $JOBS not found.
    exit 1
fi

# move to the jobs directory before further action
cd $JOBS

# Make sure completed job directory exists, if not create it
if [ ! -d $COMPJOBS ]; then
    /bin/mkdir -p $COMPJOBS
fi

# loop over job files in sort order, skip files ^HOLD-*

for j in *.job; do
    echo $j|grep -qi '^hold-' && continue
    [ ! -f $j ] && continue
    echo "Job: " $j
    l="${j%.*}".log
    [ -f ../log/$l ] && tail -1 ../log/$l
    /usr/bin/tr -d '\r' <$j |gam batch -
    /bin/mv $j $COMPJOBS
    if [ $? != "0" ]; then
	echo "WARNING: Job: $j completed with errors."
    fi
done
